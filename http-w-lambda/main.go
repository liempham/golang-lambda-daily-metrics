package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/aws/aws-lambda-go/lambda"
	"github.com/joho/godotenv"
)

type ReportRequest struct {
	DisplayIn    string   `json:"displayIn"`
	ReportPeriod string   `json:"reportPeriod"`
	ReportTypes  []string `json:"reportTypes"`
	From         string   `json:"from"`
	To           string   `json:"to"`
	Tz           string   `json:"tz"`
	XLabel       string   `json:"xLabel"`
	YLabel       string   `json:"yLabel"`
}

//generated by https://mholt.github.io/json-to-go/
type Response struct {
	Result []struct {
		Name    string `json:"name"`
		RawData []Report
	} `json:"result"`
}
type Report struct {
	Date  string `json:"Date"`
	Count int    `json:"Count"`
}
type SlackMessage struct {
	Text string `json:"text"`
}

func main() {
	lambda.Start(getReport)

}
func getReport() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatalf("Error loading .env file")
		log.Fatalln(err)
	}
	apiHost := os.Getenv("API_HOST")
	token := os.Getenv("API_TOKEN")
	slackChannel := os.Getenv("SLACK_CHANNEL")

	//e.g. 2022-05-28
	queryDate := time.Now().Add(-24 * time.Hour).Format("2006-01-02")

	postBody := ReportRequest{
		DisplayIn:    "bar",
		ReportPeriod: "%Y-%m-%d",
		ReportTypes:  []string{"MEDICAL_ORDER_SUCCESS", "MEDICAL_ORDER_FAIL"},
		From:         queryDate,
		To:           queryDate,
		Tz:           "Asia/Saigon",
		XLabel:       "Date",
		YLabel:       "Count",
	}

	var bearer = "Bearer " + token

	json_data, err := json.Marshal(postBody)
	// log.Println(string([]byte(json_data)))

	if err != nil {
		log.Fatal(err)
	}

	// resp, err := http.Post(apiHost, "application/json", bytes.NewBuffer(json_data))
	req, _ := http.NewRequest("POST", apiHost, bytes.NewBuffer(json_data))

	req.Header.Add("Authorization", bearer)
	req.Header.Add("Content-Type", "application/json")
	// log.Printf("req.Body: %v\n", req.Body)

	client := &http.Client{}

	resp, err := client.Do(req)

	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println("Error while reading the response bytes:", err)
	}
	// log.Println(string([]byte(body)))

	var result Response
	if err := json.Unmarshal(body, &result); err != nil { // Parse []byte to the go struct pointer
		log.Println("Can not unmarshal JSON")
	}

	reportDate := ""
	reportSuccess := 0
	reportFail := 0
	// Loop through the data node
	for _, rec := range result.Result {
		for _, rep := range rec.RawData {
			reportDate = rep.Date
			if rec.Name == "MEDICAL_ORDER_SUCCESS" {
				reportSuccess = rep.Count
			} else if rec.Name == "MEDICAL_ORDER_FAIL" {
				reportFail = rep.Count
			}
			// log.Printf("Date: %s, Count: %d", rep.Date, rep.Count)
		}
	}

	slack := SlackMessage{
		Text: fmt.Sprintf("Date: %s, Success/Fail/Total: %d/%d/%d", reportDate, reportSuccess, reportFail, reportSuccess+reportFail),
	}
	slackJson, _ := json.Marshal(slack)
	log.Println(slack)

	_, err = http.Post(slackChannel, "application/json", bytes.NewBuffer(slackJson))
	if err != nil {
		log.Fatal(err)
	}

}
